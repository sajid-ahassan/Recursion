#include <bits/stdc++.h>
using namespace std;

#define all(x) (x).begin(), (x).end()
#define allr(x) (x).rbegin(), (x).rend()
#define gsize(x) (int)((x).size())
// #define int long long
// #define endl '\n'
bool comparePairs(const pair<int, int> &a, const pair<int, int> &b)
{
    if (a.first != b.first)
        return a.first > b.first;
    return a.second < b.second;
}
#define optimize()                \
    ios_base::sync_with_stdio(0); \
    cin.tie(0);                   \
    cout.tie(0);
// const int mod = 1e10 + 7;
void marging(vector<int> &arr, int low, int mid, int high)
{
    vector<int> temp;
    int st = low;
    int sst = mid + 1;
    while (st <= mid && sst <= high)
    {
        if (arr[st] < arr[sst])
        {
            temp.push_back(arr[st]);
            st++;
        }
        else
        {
            temp.push_back(arr[sst]);
            sst++;
        }
    }
    while (st <= mid)
    {
        temp.push_back(arr[st]);
        st++;
    }
    while (sst <= high)
    {
        temp.push_back(arr[sst]);
        sst++;
    }
    for (int i = low; i <= high; i++)
    {
        arr[i] = temp[i - low];
    }
}
void mergeSort(vector<int> &arr, int low, int high)
{
    if (low >= high)
        return;
    int mid = (low + high) / 2;
    mergeSort(arr, low, mid);
    mergeSort(arr, mid + 1, high);
    marging(arr, low, mid, high);
}

signed main()
{
    optimize();
    int n, s;
    cin >> n;
    vector<int> v(n);
    for (int i = 0; i < n; i++)
        cin >> v[i];
    mergeSort(v, 0, n);
    for (int i = 0; i < n; i++)
        cout << v[i] << ' ';
    cout << endl;
    return 0;
}
